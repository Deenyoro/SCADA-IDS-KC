name: Build Windows Executable

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.11.9'
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.11.9' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install "pyinstaller==6.6.0" pyinstaller-hooks-contrib
        pip install "pefile==2023.2.7" altgraph

    - name: Build Windows executable with PyInstaller
      run: |
        echo "üöÄ Building Windows executable with native PyInstaller..."
        
        # Create dist and logs directories
        New-Item -ItemType Directory -Force -Path dist, logs, build
        
        # Build with PyInstaller using onefile approach
        pyinstaller --onefile `
          --name SCADA-IDS-KC `
          --paths src `
          --hidden-import=scada_ids `
          --hidden-import=scada_ids.settings `
          --hidden-import=scada_ids.controller `
          --hidden-import=scada_ids.capture `
          --hidden-import=scada_ids.features `
          --hidden-import=scada_ids.ml `
          --hidden-import=scada_ids.notifier `
          --hidden-import=ui `
          --hidden-import=ui.main_window `
          --hidden-import=pydoc `
          --collect-all sklearn `
          --collect-all scipy `
          --collect-all numpy `
          --collect-all joblib `
          --add-data "config;config" `
          --add-data "src;src" `
          --add-data "models;models" `
          --add-data "logo.png;." `
          --noconfirm `
          --clean `
          --log-level DEBUG `
          --distpath dist `
          --workpath build `
          main.py

    - name: Verify Windows executable
      run: |
        echo "üìã Verifying Windows executable..."
        if (Test-Path "dist/SCADA-IDS-KC.exe") {
          echo "‚úÖ Executable created successfully"
          $size = (Get-Item "dist/SCADA-IDS-KC.exe").Length
          echo "üìä File size: $size bytes"
          
          # Test if it's a valid PE executable
          $fileInfo = Get-Command "dist/SCADA-IDS-KC.exe" -ErrorAction SilentlyContinue
          if ($fileInfo) {
            echo "‚úÖ Valid Windows PE executable"
          } else {
            echo "‚ö†Ô∏è File exists but may not be a valid executable"
          }
        } else {
          echo "‚ùå Executable not found"
          echo "Contents of dist/:"
          Get-ChildItem dist/ -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Create build info
      run: |
        echo "Creating build information file..."
        @"
        SCADA-IDS-KC Windows Native Build Information
        ==========================================
        
        Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        Git Commit: ${{ github.sha }}
        Git Branch: ${{ github.ref_name }}
        Python Version: $(python --version)
        Build Environment: GitHub Actions Windows Server 2022
        Build Method: Native Windows PyInstaller
        
        File Information:
        $(if (Test-Path "dist/SCADA-IDS-KC.exe") { 
          "Size: $((Get-Item 'dist/SCADA-IDS-KC.exe').Length) bytes"
          "Created: $((Get-Item 'dist/SCADA-IDS-KC.exe').CreationTime)"
        } else { 
          "Executable not found" 
        })
        
        Build Triggered By: ${{ github.event_name }}
        Actor: ${{ github.actor }}
        
        PyInstaller Version: $(pip show pyinstaller | Select-String "Version")
        "@  | Out-File -FilePath "dist/BUILD_INFO.txt" -Encoding UTF8

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable-${{ github.sha }}
        path: |
          dist/SCADA-IDS-KC.exe
          dist/BUILD_INFO.txt
        retention-days: 30
        if-no-files-found: error
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.sha }}
        path: |
          build/
        retention-days: 7
        if-no-files-found: warn

  test-windows:
    runs-on: windows-latest
    needs: build-windows
    if: (github.event_name == 'pull_request' || github.event_name == 'push') && needs.build-windows.result == 'success'
    
    steps:
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: windows-executable-${{ github.sha }}
        path: dist/
        
    - name: Test Windows executable
      run: |
        echo "üß™ Testing Windows executable on native Windows..."
        
        # Check if executable exists
        if (Test-Path "dist/SCADA-IDS-KC.exe") {
          echo "‚úÖ Executable found"
          Get-ChildItem "dist/SCADA-IDS-KC.exe" | Format-List Name, Length, CreationTime, LastWriteTime, VersionInfo
          
          echo "üöÄ Testing version command..."
          try {
            $output = & "dist/SCADA-IDS-KC.exe" --version 2>&1
            echo "‚úÖ Version command successful: $output"
          } catch {
            echo "‚ö†Ô∏è Version command failed: $_"
          }
          
          echo "üìñ Testing help command..."
          try {
            & "dist/SCADA-IDS-KC.exe" --help | Out-Null
            echo "‚úÖ Help command successful"
          } catch {
            echo "‚ö†Ô∏è Help command failed: $_"
          }
          
          echo "üéâ Windows testing completed"
        } else {
          echo "‚ùå Executable not found"
          echo "Contents of dist/:"
          Get-ChildItem dist/ -ErrorAction SilentlyContinue
          exit 1
        }
