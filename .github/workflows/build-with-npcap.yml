name: Build SCADA-IDS-KC with Bundled Npcap

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      npcap_version:
        description: "Npcap version to bundle"
        required: false
        default: "latest"
        type: string
      force_download:
        description: "Force re-download Npcap"
        required: false
        default: false
        type: boolean

# Prevent multiple instances of this workflow from running simultaneously
concurrency:
  group: build-with-npcap-${{ github.ref }}
  cancel-in-progress: true
      create_release:
        description: "Create GitHub release"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  NPCAP_VERSION: ${{ github.event.inputs.npcap_version || 'latest' }}
  BUILD_VARIANT: "with-npcap"

jobs:
  prepare-npcap:
    runs-on: windows-latest
    outputs:
      npcap-prepared: ${{ steps.prepare.outputs.success }}
      npcap-version: ${{ steps.prepare.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Cache Npcap installer
        id: cache-npcap
        uses: actions/cache@v4
        with:
          path: npcap/
          key: npcap-${{ env.NPCAP_VERSION }}-${{ hashFiles('scripts/prepare_npcap.py') }}
          restore-keys: |
            npcap-${{ env.NPCAP_VERSION }}-
            npcap-

      - name: Prepare Npcap installer
        id: prepare
        timeout-minutes: 10
        run: |
          echo "Preparing Npcap installer..."

          $args = @("scripts/prepare_npcap.py", "--version", "${{ env.NPCAP_VERSION }}", "--verbose")
          if ("${{ github.event.inputs.force_download }}" -eq "true") {
            $args += "--force"
          }

          try {
            python @args
            $exitCode = $LASTEXITCODE

            if ($exitCode -ne 0) {
              echo "prepare_npcap.py failed with exit code: $exitCode"
              echo "success=false" >> $env:GITHUB_OUTPUT
              exit 1
            }
          } catch {
            echo "Error running prepare_npcap.py: $_"
            echo "success=false" >> $env:GITHUB_OUTPUT
            exit 1
          }

          if (Test-Path "npcap/npcap-installer.exe") {
            echo "success=true" >> $env:GITHUB_OUTPUT

            # Get file info
            $installer = Get-Item "npcap/npcap-installer.exe"
            $size = $installer.Length
            echo "Npcap installer prepared successfully: $size bytes"
            echo "version=${{ env.NPCAP_VERSION }}" >> $env:GITHUB_OUTPUT
          } else {
            echo "success=false" >> $env:GITHUB_OUTPUT
            echo "Failed to prepare Npcap installer - file not found"
            exit 1
          }

      - name: Fallback Npcap preparation
        id: fallback
        if: steps.prepare.outputs.success != 'true'
        run: |
          echo "Primary Npcap preparation failed, trying fallback..."

          # Try with force flag and specific version
          python scripts/prepare_npcap.py --version "1.79" --force --verbose

          if (Test-Path "npcap/npcap-installer.exe") {
            echo "Fallback preparation succeeded"
            echo "success=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "Fallback preparation also failed"
            echo "success=false" >> $env:GITHUB_OUTPUT
          }

      - name: Upload Npcap artifacts
        if: steps.prepare.outputs.success == 'true' || steps.fallback.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: npcap-installer
          path: |
            npcap/npcap-installer.exe
            npcap/fallback_info.json
          retention-days: 7

  build-windows:
    needs: prepare-npcap
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, windows-latest]
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Npcap artifacts
        if: needs.prepare-npcap.outputs.npcap-prepared == 'true'
        uses: actions/download-artifact@v4
        with:
          name: npcap-installer
          path: npcap/

      - name: Verify Npcap download
        if: needs.prepare-npcap.outputs.npcap-prepared == 'true'
        run: |
          if (Test-Path "npcap/npcap-installer.exe") {
            $installer = Get-Item "npcap/npcap-installer.exe"
            echo "Npcap installer available: $($installer.Length) bytes"
          } else {
            echo "WARNING: Npcap installer not available - building without bundled Npcap"
          }

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install system dependencies
        run: |
          # Install Npcap for build environment testing
          if (Test-Path "npcap/npcap-installer.exe") {
            echo "Installing Npcap for build environment..."
            Start-Process -FilePath "npcap/npcap-installer.exe" -ArgumentList "/S", "/winpcap_mode=yes", "/admin_only=no", "/loopback_support=yes" -Wait -Verb RunAs
            
            # Wait for service to start
            Start-Sleep -Seconds 10
            
            # Verify installation
            $service = Get-Service -Name "npcap" -ErrorAction SilentlyContinue
            if ($service -and $service.Status -eq "Running") {
              echo "Npcap service is running"
            } else {
              echo "WARNING: Npcap service not running"
            }
          } else {
            echo "No Npcap installer available for build environment"
          }

      - name: Run tests
        run: |
          echo "Running basic system tests..."
          python -c "
          import sys
          sys.path.insert(0, 'src')

          # Test imports
          try:
              from scada_ids.npcap_manager import get_npcap_manager
              manager = get_npcap_manager()
              status = manager.get_system_status()
              print(f'Npcap system status: {status}')
          except Exception as e:
              print(f'Npcap manager test failed: {e}')

          # Test basic functionality
          try:
              from scada_ids.controller import IDSController
              controller = IDSController()
              interfaces = controller.get_available_interfaces()
              print(f'Available interfaces: {len(interfaces)}')
          except Exception as e:
              print(f'Controller test failed: {e}')
          "

      - name: Build with PyInstaller
        run: |
          echo "Building SCADA-IDS-KC with PyInstaller..."
          cd packaging
          pyinstaller --clean SCADA-IDS-KC-main.spec

          # Verify build
          if (Test-Path "dist/SCADA-IDS-KC.exe") {
            $exe = Get-Item "dist/SCADA-IDS-KC.exe"
            echo "Build successful: $($exe.Length) bytes"
          } else {
            echo "Build failed - executable not found"
            exit 1
          }

      - name: Test built executable
        run: |
          echo "Testing built executable..."
          cd packaging

          # Test basic functionality
          ./dist/SCADA-IDS-KC.exe --cli --version
          ./dist/SCADA-IDS-KC.exe --cli --diagnose-npcap
          ./dist/SCADA-IDS-KC.exe --cli --interfaces

      - name: Create release package
        run: |
          Write-Host "Creating release package..."

          # Create release directory
          New-Item -ItemType Directory -Path "release" -Force

          # Copy executable and rename for variant
          Copy-Item "packaging/dist/SCADA-IDS-KC.exe" "release/SCADA-IDS-KC-with-npcap.exe"

          # Copy documentation
          Copy-Item "README.md" "release/"
          if (Test-Path "docs") {
            Copy-Item "docs/" "release/docs/" -Recurse -ErrorAction SilentlyContinue
          }

          # Create simple installation guide
          "# SCADA-IDS-KC with Bundled Npcap`n`nThis build includes embedded Npcap installer.`nRun as Administrator for full functionality." | Out-File -FilePath "release/INSTALLATION.md" -Encoding UTF8

          # Create version info
          $version = Get-Date -Format "yyyy.MM.dd.HHmm"
          $npcap_status = if (Test-Path "npcap/npcap-installer.exe") { "bundled" } else { "not-bundled" }

          $versionInfo = @{
            version = $version
            build_date = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            npcap_version = "${{ needs.prepare-npcap.outputs.npcap-version }}"
            npcap_status = $npcap_status
            python_version = "${{ env.PYTHON_VERSION }}"
            platform = "windows"
            build_variant = "with-npcap"
          }
          $versionInfo | ConvertTo-Json | Out-File -FilePath "release/version.json" -Encoding UTF8

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scada-ids-kc-with-npcap-${{ matrix.os }}-py${{ matrix.python-version }}
          path: release/
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            packaging/build/
            packaging/dist/
          retention-days: 7

  test-without-npcap:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build without Npcap
        run: |
          echo "Building without bundled Npcap..."
          cd packaging
          pyinstaller --clean SCADA-IDS-KC-main.spec

      - name: Test fallback behavior
        run: |
          echo "Testing fallback behavior without Npcap..."
          cd packaging

          # Test that application handles missing Npcap gracefully
          ./dist/SCADA-IDS-KC.exe --cli --diagnose-npcap

          # Should exit with error code but not crash
          $exitCode = $LASTEXITCODE
          if ($exitCode -eq 0) {
            echo "WARNING: Expected non-zero exit code for missing Npcap"
          } else {
            echo "Correctly detected missing Npcap (exit code: $exitCode)"
          }

  create-release:
    if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
    needs: [build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name || format('v{0}', github.run_number) }}
          name: SCADA-IDS-KC with Bundled Npcap ${{ github.ref_name || format('Build {0}', github.run_number) }}
          body: |
            ## SCADA-IDS-KC with Bundled Npcap

            This release includes an embedded Npcap installer for automatic packet capture setup.

            ### Features:
            - Automatic Npcap installation and configuration
            - No manual Npcap setup required
            - Comprehensive system diagnostics
            - Fallback detection for existing installations

            ### Usage:
            1. Download `SCADA-IDS-KC-with-npcap.exe`
            2. Run as Administrator
            3. Npcap will be automatically installed if needed

            ### Build Information:
            - Npcap Version: ${{ needs.prepare-npcap.outputs.npcap-version }}
            - Build Date: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
          files: artifacts/**/*
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
